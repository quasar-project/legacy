/**
  * \page planner_manual Документация по планировщику задач
  * \tableofcontents

  * \section PLANNER_CREATION Создание полетного задания
  * \subsection PLANNER_SUB1 Процесс взаимодействия бортового и наземного сегмента ПО
  *
  * Взаимодействие происходит при помощи передачи и приема сообщений (датаграмм) посредством сетевого протокола UDP.
  * Порядок байтов — Big endian. В общем случае сеанс обмена сообщениями состоит из передачи запроса с последующим приемом ответа сервиса.
  * Запрос состоит из заголовка запроса и данных запроса, расположенных последовательно в сообщении:
  * \code {.py}
    {
        marker
        id
        r
        ip
        port
        lat
        lon
        cnt
        len
        UTF-8 command string
    }
  * \endcode
  *
  * Ответ сервиса РЛС является подтверждением обработки запроса и состоит только из заголовка ответа.
  *
  * \subsection PLANNER_SUB2 Заголовок запроса
  * Заголовок запроса имеет следующую структуру (пример реализации на языке Си):
  * \code {.c}
    struct Point
    {
        uint32_t marker;
        uint16_t id;
        uint16_t r;
        uint32_t ip;
        uint16_t port;
        double lat;
        double lon;
        uint16_t cnt;
        uint16_t len;
    };
  * \endcode
  * где:
  * -	marker - Константа, маркер сообщения. Всегда равен <tt>0x55DD55DD</tt>;
  * -	id - идентификационный номер точки. Номер должен быть уникален для каждого нового объекта. В случае, если послать несколько сообщений с одним и тем же номером, то сообщения будут перезаписаны. Может принимать следующие значения: 0..65535;
  * -	r - радиус зоны, при достижении которой происходит событие (далее - зона события). Может принимать следующие значения: 0..65535 метров;
  * -	ip - IP-адрес (протокол IPv4) для обратной связи в бинарном виде. Например, ip <tt>192.168.1.1</tt> = <tt>0xC0A80101</tt>;
  * -	port - порт IP-адресса дляобратной связи. Может принимать следующие значения: 0..65535;
  * -	lat - географическая широта центра зоны события. Стандарт WGS-84. Может принимать следующие значения: -90..90 градусов;
  * -	lon - географическая долгота центра зоны события. Стандарт WGS-84. Может принимать следующие значения: -180..180 градусов;
  * -	cnt - время жизни зоны события (в количестве срабатываний при достижении). Может принимать следующие значения: 0..65535;
  * -	len - количество байт данных.
  *
  * \subsection PLANNER_SUB3 Данные запроса
  * Данные запроса должны быть представлены в виде строки в формате execd (без id, размера и контрольной суммы).
  * Например:
  * \code
  * $some_script(arg1, arg2, arg3)
  * \endcode
  * Параметр len примера равен 30.
  *
  * \subsection PLANNER_SUB4 Заголовок ответа
  * Заголовок ответа имеет следующую структуру (пример реализации на языке Си):
  * \code {.c}
    struct PointResponse
    {
        uint32_t marker;
        uint16_t id;
        uint16_t cnt;
    };
  * \endcode
  * где:
  * -	marker - Константа, маркер сообщения. Всегда равен 0x55CC55CC;
  * -	id - идентификационный номер точки;
  * -	cnt - актуальное значение счётчика событий.
  *
  * \subsection PLANNER_SUB5 Добавление точки полетного задания
  * Для добавления точки необходимо сформировать запрос, заполнив данные запроса и все поля заголовка запроса.
  * После успешной обработки запроса сервис вышлет заголовок ответа.
  * При попытке добавления точки с id, который был добавлен ранее — произойдёт замена точки.
  *
  * \subsection PLANNER_SUB6 Удаление точки полетного задания
  * При достижении cnt = 0 — точки удаляются автоматически, при этом сервис вышлет оповещение об удалении точки на адрес,
  * указанный при добавлении точки (поля ip и port). Автоматическое удаление происходит асинхронно и не требует запроса.
  * При очередном достижении зоны события счетчик cnt декрементируется. Таким образом команда, содержащаяся в данных
  * запроса точки будет передана столько раз на исполнение столько раз, сколько  носитель РЛС достигнет зоны события,
  * но не больше cnt раз, заданных при добавлении точки.
  * Для ручного удаления точки необходимо передать сообщение со следующим заголовком запроса:
  * \code {.c}
    struct Point
    {
        uint32_t marker = 0x55DD55DD;
        uint16_t id = id удаляемой точки;
        uint16_t r = "не имеет значения";
        double lat = "не имеет значения";
        double lon = "не имеет значения";
        uint16_t cnt = 0;
        uint16_t len = "не имеет значения";
    };
  * \endcode
  * После успешной обработки запроса сервис вышлет заголовок ответа.
  *
  * \section PLANNER_STATUS Запрос статуса
  * Подписка на запрос статусных сообщений осуществляется по аналогии с подпиской на запрос навигационных данных,
  * однако для получения статусных сообщений значение поля \c marker необходимо заменить на следующую константу: <tt>0x55FF55FF</tt>.
  * \subsection PLANNER_SUB7 Ответ сервиса
  * В ответ на инициализационное сообщение сервис  начинает (или прекращает, в зависимости от значения флага инициализации)
  * отправлять сообщения, которые имеют следующую структуру:
  * \code {.c}
    struct Status
    {
        uint32_t marker;
        uint16_t voltage1;
        uint16_t voltage2;
        uint8_t switch;
        uint8_t sar;
        uint8_t r1;
        uint8_t r2;
    };
  * \endcode
  * где:
  * -	marker - Константа, маркер сообщения. Всегда равен <tt>0x55EE55EE</tt>;
  * -	voltage1 — напряжение первичного источника питания, мВ;
  * -	voltage2 — напряжение вторичного источника питания, мВ;
  * -	switch — состояние коммутатора (см. \ref PLANNER_TABLE_1);
  * -	sar — состояние радиолокационного модуля (см. \ref PLANNER_TABLE_2);
  * -	r1 — резерв 1;
  * -	r2 — резерв 2;
  *
  * \section PLANNER_TABLES Приложение
  * \subsection PLANNER_TABLE_1 Таблица 1: Биты поля switch
  * <table>
    <caption id="multi_row">Биты поля switch</caption>
    <tr><th>Номер бита <th>Назначение                                    <th>Значение
    <tr><td>0     </td><td>Антенный коммутатор подключен            </td><td>0: подключен; 1: отключен.</td></tr>
    <tr><td>1, 2  </td><td>Состояние каналов                        </td><td>0: канал 1 и канал 2 выключены; 1: канал 1 включен, канал 2 выключен; 2: канал 1 выключен, канал 2 включен; 3: зарезервирован</td></tr>
    <tr><td>3     </td><td>Наличие сигнала на входе коммутатора     </td><td>0: отсутствует; 1: присутствует.</td></tr>
    <tr><td>4 - 7 </td><td>Сбой                                     </td><td>0: Ошибок нет; *: Код ошибки.</td></tr>
    </table>

  * \subsection PLANNER_TABLE_2 Таблица 1: Биты поля sar
  * <table>
    <caption id="multi_row">Биты поля switch</caption>
    <tr><th>Номер бита <th>Назначение                                    <th>Значение
    <tr><td>0     </td><td>Излучение                                </td><td>0: выключено; 1: включено.</td></tr>
    <tr><td>1     </td><td>Формирование РЛИ                         </td><td>0: вычислитель бездействует; 1: вычислитель формирует РЛИ.</td></tr>
    <tr><td>2     </td><td>Вычислитель в сети                       </td><td>0: вычислитель отключен от сети; 1: вычислитель подключен к сети.</td></tr>
    <tr><td>3     </td><td>Состояние планировщика задач (execd)     </td><td>0: выключен; 1: включен.</td></tr>
    <tr><td>4     </td><td>Передача файла (РЛИ)                     </td><td>0: нет передачи; 1: передача.</td></tr>
    <tr><td>5 - 7 </td><td>Резерв                                   </td><td>-</td></tr>
    </table>
  */