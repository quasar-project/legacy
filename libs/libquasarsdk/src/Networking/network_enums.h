/**
 *  \file CEnums.h
 *  \author Дмитрий Рязанцев
 *  \date 04.07.2023
 *  \copyright Radar-MMS 2023
 */

#pragma once

#include <QtCore/QObject>

namespace QuasarSDK
{
  /**
   * \ingroup sdk_network
   * \brief Класс-обёртка для общих перечислений SDK РЛС "Квазар".
   * \details Предоставляет общие перечисления для использования
   * между различными классами внутри SDK, а также позволяет
   * зарегистрировать их в мета-объектной системе для доступа из
   * движка QML.
   */
  class Enums : public QObject
  {
    Q_OBJECT

    public:
      //! @brief Перечисление статус-кодов команды ping.
      enum PingStatus
      {
        Success,            //!< Успешное выполнение команды ping.
        DelayedSuccess,     //!< Команда выполнена с задержкой.
        Timeout,            //!< Команда не выполнена.
        Idle                //!< Выполнение команды не было запрошено.
      };

      //! @brief Перечисление категорий аргументов параметров формирования.
      enum ArgumentCategory
      {
        Form,               //!< Аргументы формирования.
        Focus,              //!< Аргументы фокусировки.
        Reform              //!< Аргументы переформирования.
      };

      //! @brief Перечисление встроенных в приложение команд.
      enum NetworkCommand
      {
        FormImage,          //!< Запуск формирования телескопического изображения.
        FocusImage,         //!< Фокусировка телескопического изображения.
        SimpleStrip,        //!< Запуск формирования упрощенного полосового изображения.
        StartStrip,         //!< Запуск съемки полосового изображения.
        StopStrip,          //!< Остановка съемки полосового изображения.
        ReformImage,        //!< Переформирование телескопического изображения.
        RemoteStorageStatus,//!< Запрос информации о дисковом хранилище на РЛС.
        ClearRemoteStorage, //!< Очистка дискового хранилища на РЛС.
        Reboot,             //!< Запрос на перезагрузку систем РЛС.
        PowerOff            //!< Запрос на выключение систем РЛС.
      };

      /// \brief Перечисление сигналов для процесса (https://ru.wikipedia.org/wiki/Сигнал_(Unix))
      enum UnixSignal
      {
        SigHUP = 1,           ///< <b>Уведомление</b>: закрытие терминала.
        SigINT,               ///< <b>Управление</b>: сигнал прерывания (Ctrl-C) с терминала.
        SigQUIT,              ///< <b>Управление</b>: сигнал «Quit» с терминала (Ctrl-\).
        SigILL,               ///< <b>Уведомление</b>: недопустимая операция процессора.
        SigTRAP,              ///< <b>Отладка</b>: ловушка трассировки или брейкпоинт.
        SigABRT,              ///< <b>Управление</b>: сигнал посылаемый функцией abort().
        SigFPE = 8,           ///< <b>Исключение</b>: ошибочная арифметическая операция.
        SigKILL,              ///< <b>Управление</b>: безусловное завершение.
        SigBUS,               ///< <b>Исключение</b>: неправильное обращение в физическую память.
        SigSEGV,              ///< <b>Исключение</b>: нарушение при обращении в память.
        SigSYS,               ///< <b>Исключение</b>: неправильный системный вызов.
        SigPIPE,              ///< <b>Уведомление</b>: запись в разорванное соединение (пайп, сокет).
        SigALRM,              ///< <b>Уведомление</b>: сигнал истечения времени, заданного alarm().
        SigTERM,              ///< <b>Управление</b>: сигнал завершения (сигнал по умолчанию для утилиты kill).
        SigUSR1,              ///< <b>Пользовательский</b>: пользовательский сигнал № 1.
        SigUSR2,              ///< <b>Пользовательский</b>: пользовательский сигнал № 2.
        SigCHLD,              ///< <b>Уведомление</b>: дочерний процесс завершен или остановлен.
        SigTSTP = 20,         ///< <b>Пользовательский</b>: сигнал остановки с терминала (Ctrl-Z).
        SigURG,               ///< <b>Уведомление</b>: на сокете получены срочные данные.
        SigPOLL,              ///< <b>Уведомление</b>: событие, отслеживаемое poll().
        SigSTOP,              ///< <b>Управление</b>: остановка выполнения процесса.
        SigCONT = 25,         ///< <b>Управление</b>: продолжить выполнение ранее остановленного процесса.
        SigTTIN,              ///< <b>Управление</b>: попытка чтения с терминала фоновым процессом.
        SigTTOU,              ///< <b>Управление</b>: попытка записи на терминал фоновым процессом.
        SigVTALRM,            ///< <b>Уведомление</b>: истечение «виртуального таймера».
        SigPROF,              ///< <b>Отладка</b>: истечение таймера профилирования.
        SigXCPU,              ///< <b>Исключение</b>: процесс превысил лимит процессорного времени.
        SigXFSZ,              ///< <b>Исключение</b>: процесс превысил допустимый размер файла.
      };

      Q_ENUM(PingStatus)
      Q_ENUM(ArgumentCategory)
      Q_ENUM(NetworkCommand)
      Q_ENUM(UnixSignal)
  };
} // QuasarSDK

#include <QtCore/QMetaType>
Q_DECLARE_METATYPE(QuasarSDK::Enums::PingStatus)
Q_DECLARE_METATYPE(QuasarSDK::Enums::ArgumentCategory)
Q_DECLARE_METATYPE(QuasarSDK::Enums::NetworkCommand)
Q_DECLARE_METATYPE(QuasarSDK::Enums::UnixSignal)