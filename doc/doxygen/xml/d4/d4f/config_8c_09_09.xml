<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="d4/d4f/config_8c_09_09" kind="file" language="C++">
    <compoundname>config.c++</compoundname>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <includes refid="dd/df2/paths_8h" local="yes">paths.h</includes>
    <includes local="no">QtCore/QSettings</includes>
    <includes local="no">QtCore/QDebug</includes>
    <incdepgraph>
      <node id="1">
        <label>src/c++/config/config.c++</label>
        <link refid="d4/d4f/config_8c_09_09"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>config.h</label>
        <link refid="db/d16/config_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>paths.h</label>
        <link refid="dd/df2/paths_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>QtCore/QDebug</label>
      </node>
      <node id="4">
        <label>QtCore/QMap</label>
      </node>
      <node id="3">
        <label>QtCore/QObject</label>
      </node>
      <node id="7">
        <label>QtCore/QSettings</label>
      </node>
      <node id="5">
        <label>QtCore/QVariant</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d2/dff/namespaceConfig">Config</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d4/d4f/config_8c_09_09_1a9592cded2169a0727532c46cb4ef4bd5" prot="public" static="no">
        <name>QSTRING_CAST</name>
        <param><defname>x</defname></param>
        <initializer>QVariant(x).toString()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/config/config.c++" line="7" column="9" bodyfile="src/c++/config/config.c++" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;paths.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCore/QSettings&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCore/QDebug&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QSTRING_CAST(x)<sp/>QVariant(x).toString()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="d5/dfa/classConfig_1_1Config_1aab4f0df3041b8a7fb08052df350ebcbd" refkind="member"><highlight class="normal"><ref refid="d5/dfa/classConfig_1_1Config" kindref="compound">Config::Config</ref><sp/>*<ref refid="d5/dfa/classConfig_1_1Config_1aab4f0df3041b8a7fb08052df350ebcbd" kindref="member">Config::Config::get</ref>()<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/dff/namespaceConfig" kindref="compound">Config</ref><sp/>instance;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;instance;<sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="d5/dfa/classConfig_1_1Config_1a54dfba499c9d9e1003d4c9bcbe6ad1c5" refkind="member"><highlight class="normal"><ref refid="d5/dfa/classConfig_1_1Config_1a54dfba499c9d9e1003d4c9bcbe6ad1c5" kindref="member">Config::Config::~Config</ref>()</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;save();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sync();</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d5/dfa/classConfig_1_1Config_1aae2c382151ef7c9aa913361172b30db6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1aae2c382151ef7c9aa913361172b30db6" kindref="member">Config::Config::save</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>qInfo()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[CONFIG]<sp/>Saving<sp/>settings<sp/>to<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>schedule_restart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;remoteIP&quot;</highlight><highlight class="normal">,<sp/>remoteIP());</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;localIP&quot;</highlight><highlight class="normal">,<sp/>localIP());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;jetsonIP&quot;</highlight><highlight class="normal">,<sp/>jetsonIP());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;navIP&quot;</highlight><highlight class="normal">,<sp/>navIP());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;utl1IP&quot;</highlight><highlight class="normal">,<sp/>utl1IP());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;utl2IP&quot;</highlight><highlight class="normal">,<sp/>utl2IP());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;telemetryPort&quot;</highlight><highlight class="normal">,<sp/>telemetryPort());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;telemetryRecvPort&quot;</highlight><highlight class="normal">,<sp/>telemetryRecvPort());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;lfsPort&quot;</highlight><highlight class="normal">,<sp/>tcpLFSPort());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;stripPort&quot;</highlight><highlight class="normal">,<sp/>udpLFSPort());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;execdPort&quot;</highlight><highlight class="normal">,<sp/>execdPort());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;feedbackPort&quot;</highlight><highlight class="normal">,<sp/>feedbackPort());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;telemetryFrequency&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(telemetryFrequency()));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;proxyEnabled&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(proxyEnabled()));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;tcpMarker&quot;</highlight><highlight class="normal">,<sp/>tcpMarker());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;storedLatitude&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(storedLatitude()));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;storedLongitude&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(storedLongitude()));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;storedZoomLevel&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(storedZoomLevel()));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;storedCatalogue&quot;</highlight><highlight class="normal">,<sp/>storedCatalogue());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;antennaAlignment&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(antennaAlignment()));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;angleCorrection&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(angleCorrection()));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;useRadians&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(useRadians()));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;useDriftAngle&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(useDriftAngle()));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;thetaAzimuthCorrection&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(thetaAzimuthCorrection()));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;overrideImageHeight&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(overrideImageHeight()));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;cutImage&quot;</highlight><highlight class="normal">,<sp/>QSTRING_CAST(cutImage()));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;theme&quot;</highlight><highlight class="normal">).toString()<sp/>!=<sp/>theme())</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schedule_restart<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ini-&gt;setValue(</highlight><highlight class="stringliteral">&quot;theme&quot;</highlight><highlight class="normal">,<sp/>theme());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(schedule_restart)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qInfo()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[CONFIG]<sp/>Requested<sp/>restart&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sync();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>scheduleRestart();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="d5/dfa/classConfig_1_1Config_1a78f61ac2dd03bcba8e09ca20cd7d68e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a78f61ac2dd03bcba8e09ca20cd7d68e3" kindref="member">Config::Config::load</ref>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>qInfo()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[CONFIG]<sp/>Loading<sp/>settings<sp/>from<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>setRemoteIP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;remoteIP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>setLocalIP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;localIP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>setJetsonIP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;jetsonIP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>setNavIP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;navIP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>setUtl1IP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;utl1IP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>setUtl2IP(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;utl2IP&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>setTelemetryPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;telemetryPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>setTelemetryRecvPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;telemetryRecvPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>setTcpLFSPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;lfsPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>setUdpLFSPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;stripPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>setExecdPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;execdPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>setFeedbackPort(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;feedbackPort&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>setTelemetryFrequency(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;telemetryFrequency&quot;</highlight><highlight class="normal">).toFloat());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>setProxyEnabled(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;proxyEnabled&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>setTcpMarker(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;tcpMarker&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>setStoredLatitude(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;storedLatitude&quot;</highlight><highlight class="normal">).toDouble());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>setStoredLongitude(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;storedLongitude&quot;</highlight><highlight class="normal">).toDouble());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>setStoredZoomLevel(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;storedZoomLevel&quot;</highlight><highlight class="normal">).toDouble());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>setStoredCatalogue(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;storedCatalogue&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>setAntennaAlignment(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;antennaAlignment&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>setAngleCorrection(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;angleCorrection&quot;</highlight><highlight class="normal">).toFloat());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>setUseRadians(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;useRadians&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>setUseDriftAngle(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;useDriftAngle&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>setThetaAzimuthCorrection(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;thetaAzimuthCorrection&quot;</highlight><highlight class="normal">).toFloat());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>setOverrideImageHeight(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;overrideImageHeight&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutImage(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;cutImage&quot;</highlight><highlight class="normal">).toBool());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>setTheme(ini-&gt;value(</highlight><highlight class="stringliteral">&quot;theme&quot;</highlight><highlight class="normal">).toString());</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d5/dfa/classConfig_1_1Config_1a9cf620340e16aa417bb112e0294038df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a9cf620340e16aa417bb112e0294038df" kindref="member">Config::Config::revert</ref>()<sp/>{<sp/>this-&gt;load();<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="d5/dfa/classConfig_1_1Config_1ad20897c5c8bd47f5d4005989bead0e55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1ad20897c5c8bd47f5d4005989bead0e55" kindref="member">Config::Config::reset</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[CONFIG]<sp/>Settings<sp/>file<sp/>resetted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;key<sp/>:<sp/>defaults.keys())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ini-&gt;setValue(key,<sp/>defaults.value(key));</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="d5/dfa/classConfig_1_1Config_1a0664ef97a51606760964d90526e64ab2" refkind="member"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a0664ef97a51606760964d90526e64ab2" kindref="member">Config::Config::projectVersion</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PROJECT_VERSION;<sp/>}</highlight></codeline>
<codeline lineno="106" refid="d5/dfa/classConfig_1_1Config_1ad55f80ed3cd8b6c4f247763b747016af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1ad55f80ed3cd8b6c4f247763b747016af" kindref="member">Config::Config::sync</ref>()<sp/>{<sp/>ini-&gt;sync();<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">Config::Config::Config(QObject*<sp/>parent)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject{parent}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>ini(new<sp/>QSettings(Paths::config()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/config.ini&quot;</highlight><highlight class="normal">,<sp/>QSettings::IniFormat,<sp/>this))</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>qDebug().noquote()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[CONFIG]<sp/>Storing<sp/>config<sp/>in&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ini-&gt;fileName();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ini-&gt;allKeys().size()<sp/>&lt;<sp/>5)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;reset();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;load();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>tcpLFSPortChanged();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="d2/dff/namespaceConfig" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="d2/dff/namespaceConfig" kindref="compound">Config</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1aced4a69727f347e1e1a73bfdd8761143" kindref="member">Config::overrideImageHeight</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_overrideImageHeight;<sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setOverrideImageHeight(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_overrideImageHeight<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>m_overrideImageHeight<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>overrideImageHeightChanged();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a6e81ba455ac73046cba68a75c0d34991" kindref="member">Config::cutImage</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cutImage;<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setCutImage(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cutImage<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cutImage<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>cutImageChanged();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a29ca03d2272c4051d7c324cd6bac3b0b" kindref="member">Config::remoteIP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_remoteIP;<sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setRemoteIP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_remoteIP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>m_remoteIP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>remoteIPChanged();</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1abb00f8fd5508af1ffc1b56f474a7ba22" kindref="member">Config::localIP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_localIP;<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setLocalIP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_localIP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>m_localIP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>localIPChanged();</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a9400347615d36fd3eed76e4f027433df" kindref="member">Config::telemetryPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_telemetryPort;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTelemetryPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_telemetryPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>m_telemetryPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>telemetryPortChanged();</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a9a898d90c155973baa06c11e8ef95813" kindref="member">Config::tcpLFSPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tcpLFSPort;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTcpLFSPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_tcpLFSPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tcpLFSPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>tcpLFSPortChanged();</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a0eddf3d43e33470977841fae03717c29" kindref="member">Config::udpLFSPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_udpLFSPort;<sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setUdpLFSPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_udpLFSPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>m_udpLFSPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>udpLFSPortChanged();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1aa7c77c61e23cb38fce8948fff5baa648" kindref="member">Config::execdPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_execdPort;<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setExecdPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_execdPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>m_execdPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>execdPortChanged();</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a1c046609722570c50455a36d69d0a037" kindref="member">Config::feedbackPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_feedbackPort;<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setFeedbackPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_feedbackPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>m_feedbackPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>feedbackPortChanged();</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1ae862ff88f11a3a2ef7eee0c21957dcb7" kindref="member">Config::proxyEnabled</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_proxyEnabled;<sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setProxyEnabled(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_proxyEnabled<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>m_proxyEnabled<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>proxyEnabledChanged();</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a66213c53fe947a7a4757bcc2b7d7fbb3" kindref="member">Config::antennaAlignment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_antennaAlignment;<sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setAntennaAlignment(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_antennaAlignment<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>m_antennaAlignment<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>antennaAlignmentChanged();</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1acc7856ea0497ce886547bd19075f4bcb" kindref="member">Config::angleCorrection</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_angleCorrection;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setAngleCorrection(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_angleCorrection,<sp/>other))</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>m_angleCorrection<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>angleCorrectionChanged();</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1af6dc8053f62613e2dd7a79d2172c658d" kindref="member">Config::useRadians</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_useRadians;<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setUseRadians(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useRadians<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>m_useRadians<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>useRadiansChanged();</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1afcbc3ba0faa77bf6b0a9b01f878181e6" kindref="member">Config::useDriftAngle</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_useDriftAngle;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setUseDriftAngle(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useDriftAngle<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>m_useDriftAngle<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>useDriftAngleChanged();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1afd2df17ea5b9473da8b4d307395c5085" kindref="member">Config::thetaAzimuthCorrection</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_thetaAzimuthCorrection;<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setThetaAzimuthCorrection(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_thetaAzimuthCorrection,<sp/>other))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>m_thetaAzimuthCorrection<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>thetaAzimuthCorrectionChanged();</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1abdcb3cc37ddbefe06ad99b3daa720afc" kindref="member">Config::storedLatitude</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_storedLatitude;<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setStoredLatitude(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_storedLatitude,<sp/>other))</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>m_storedLatitude<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>storedLatitudeChanged();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a5b2d3b040ee55818de48aed7ffc5806f" kindref="member">Config::storedLongitude</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_storedLongitude;<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setStoredLongitude(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_storedLongitude,<sp/>other))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>m_storedLongitude<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>storedLongitudeChanged();</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a6241b7c15dc9a3b9b8e412a80e00cc9d" kindref="member">Config::storedZoomLevel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_storedZoomLevel;<sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setStoredZoomLevel(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_storedZoomLevel,<sp/>other))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>m_storedZoomLevel<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>storedZoomLevelChanged();</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a153feb691de604b107e5765377364a9d" kindref="member">Config::storedCatalogue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_storedCatalogue;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setStoredCatalogue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_storedCatalogue<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.startsWith(</highlight><highlight class="stringliteral">&quot;file:///&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_storedCatalogue<sp/>=<sp/>other.right(other.size()<sp/>-<sp/>strlen(</highlight><highlight class="stringliteral">&quot;file:///&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!defined<sp/>Q_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_storedCatalogue.prepend(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_storedCatalogue<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>storedCatalogueChanged();</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d5/dfa/classConfig_1_1Config_1a752dbeb4be188be8d6e370263c380827" kindref="member">Config::telemetryFrequency</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_telemetryFrequency;<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTelemetryFrequency(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_telemetryFrequency,<sp/>other))</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>m_telemetryFrequency<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>telemetryFrequencyChanged();</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a259e4f044a571c4bc7b34a23f39492be" kindref="member">Config::tcpMarker</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tcpMarker;<sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTcpMarker(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_tcpMarker<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tcpMarker<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>tcpMarkerChanged();</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a53d9759116527e34443d82453b97f415" kindref="member">Config::theme</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_theme;<sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTheme(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_theme<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>m_theme<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>themeChanged();</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a75af3a7370fd6e32995373d2dbbf1f81" kindref="member">Config::jetsonIP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_jetsonIP;<sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setJetsonIP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_jetsonIP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>m_jetsonIP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>jetsonIPChanged();</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1aa9f58cbedfcdde939083775c3a77ef6e" kindref="member">Config::navIP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_navIP;<sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setNavIP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_navIP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>m_navIP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>navIPChanged();</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1a8af317d04dbe29e8f495cd928c0f30cb" kindref="member">Config::utl1IP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_utl1IP;<sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setUtl1IP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_utl1IP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>m_utl1IP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>utl1IPChanged();</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1afdd91838bc17767a1510db9d4e569aaa" kindref="member">Config::utl2IP</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_utl2IP;<sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setUtl2IP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_utl2IP<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>m_utl2IP<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>utl2IPChanged();</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">QString<sp/><ref refid="d5/dfa/classConfig_1_1Config_1afa3175de72b10c5da5e4664f75936346" kindref="member">Config::telemetryRecvPort</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_telemetryRecvPort;<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Config::setTelemetryRecvPort(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QString&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_telemetryRecvPort<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>m_telemetryRecvPort<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>telemetryRecvPortChanged();</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Config</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/c++/config/config.c++"/>
  </compounddef>
</doxygen>
