<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="remotedata_8c_09_09" kind="file" language="C++">
    <compoundname>remotedata.c++</compoundname>
    <includes refid="remotedata_8h" local="yes">remotedata.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/c++/network/execd/remotedata.c++</label>
        <link refid="remotedata_8c_09_09"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>remotedata.h</label>
        <link refid="remotedata_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>network/netenums.h</label>
        <link refid="netenums_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>QtCore/QMetaType</label>
      </node>
      <node id="3">
        <label>QtCore/QObject</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="remotedata_8h" kindref="compound">remotedata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceNetworking" kindref="compound">Networking</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classNetworking_1_1RemoteData_1a36dc0eec9aafe491528fe44b24d42358" kindref="member">RemoteData::RemoteData</ref>(QObject<sp/>*parent)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>QObject{parent}</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_storageSpace(0)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_de10ping((int)<ref refid="classNetworking_1_1Enums" kindref="compound">Enums</ref>::PingStatus::Idle)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_jetsonping((int)<ref refid="classNetworking_1_1Enums" kindref="compound">Enums</ref>::PingStatus::Idle)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_navping((int)<ref refid="classNetworking_1_1Enums" kindref="compound">Enums</ref>::PingStatus::Idle)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_utl1ping((int)<ref refid="classNetworking_1_1Enums" kindref="compound">Enums</ref>::PingStatus::Idle)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_utl2ping((int)<ref refid="classNetworking_1_1Enums" kindref="compound">Enums</ref>::PingStatus::Idle)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a97d63b9d48e8f4759951a15129f8f4b7" kindref="member">RemoteData::storageSpace</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_storageSpace;<sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1ab2b9cf532f4048e71cd481ef4bbef18d" kindref="member">RemoteData::setStorageSpace</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qFuzzyCompare(m_storageSpace,<sp/>other))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_storageSpace<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1a2e147693f050d5fdb7a30bb858bdb310" kindref="member">storageSpaceChanged</ref>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a64575be70fb240580cadba5b05ef90f1" kindref="member">RemoteData::de10ping</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_de10ping;<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a9f7955d1f4d4c78572195f4979638af0" kindref="member">RemoteData::setDe10ping</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_de10ping<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>m_de10ping<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1a6aa70fb1a777cb9055d03ce5c859e591" kindref="member">de10pingChanged</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1aa4a8b9cd66150a817af7e160e01cbd21" kindref="member">RemoteData::jetsonping</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_jetsonping;<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a1fc91bd8a2965a1f6647c0af53d3a64d" kindref="member">RemoteData::setJetsonping</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_jetsonping<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_jetsonping<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1aa1778bed3dbc7ed85b0d13a6bb338f41" kindref="member">jetsonpingChanged</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1aea3cae6645b2e3ad8726b2ebac617313" kindref="member">RemoteData::navping</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_navping;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1abd1c4ec44c11a88860e66f33d50a83a7" kindref="member">RemoteData::setNavping</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_navping<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_navping<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1acbc2fbe83abf7ee5e51a2d2f26adde99" kindref="member">navpingChanged</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a9a3c2b9f4186c2cf711103f845746e86" kindref="member">RemoteData::utl1ping</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_utl1ping;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a5218e567a9dc43b3999e7291e4a5bc73" kindref="member">RemoteData::setUtl1ping</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_utl1ping<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>m_utl1ping<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1a2eca0975f97573cb401ec1b9060a2fc2" kindref="member">utl1pingChanged</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1ad4aea3788e291baa32df44564be6d4d6" kindref="member">RemoteData::utl2ping</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_utl2ping;<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classNetworking_1_1RemoteData_1a671b32091808f3e4d340b22adf3f902a" kindref="member">RemoteData::setUtl2ping</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_utl2ping<sp/>==<sp/>other)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m_utl2ping<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="classNetworking_1_1RemoteData_1a35587b726f3a70c7a46093d251ed79e7" kindref="member">utl2pingChanged</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/c++/network/execd/remotedata.c++"/>
  </compounddef>
</doxygen>
