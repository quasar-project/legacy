<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classNetworking_1_1Network" kind="class" language="C++" prot="public">
    <compoundname>Networking::Network</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="network_8h" local="no">network.h</includes>
      <sectiondef kind="property">
      <memberdef kind="property" id="group__Properties_1ga1b8969b46c27f16da4d4f37754bcd7ad" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="classNetworking_1_1Telemetry" kindref="compound">Telemetry</ref> *</type>
        <definition>Telemetry* Networking::Network::telemetry</definition>
        <argsstring></argsstring>
        <name>telemetry</name>
        <qualifiedname>Networking::Network::telemetry</qualifiedname>
        <read>telemetry</read>
        <write>setTelemetry</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="1" column="0" bodyfile="src/c++/network/network.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="group__Properties_1gac96b77e2304c4f308dfd5bd59d25e383" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type><ref refid="classNetworking_1_1RemoteData" kindref="compound">RemoteData</ref> *</type>
        <definition>RemoteData* Networking::Network::remoteData</definition>
        <argsstring></argsstring>
        <name>remoteData</name>
        <qualifiedname>Networking::Network::remoteData</qualifiedname>
        <read>remoteData</read>
        <write>setRemoteData</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="1" column="0" bodyfile="src/c++/network/network.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="group__Properties_1ga8faa0f475ccedfbaf3b5bcc5261fed00" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>float</type>
        <definition>float Networking::Network::networkDelay</definition>
        <argsstring></argsstring>
        <name>networkDelay</name>
        <qualifiedname>Networking::Network::networkDelay</qualifiedname>
        <read>networkDelay</read>
        <write>setNetworkDelay</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="1" column="0" bodyfile="src/c++/network/network.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="group__Properties_1ga9ec5c75178b85fb66b7a424c3bf398df" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>float</type>
        <definition>float Networking::Network::tcpProgress</definition>
        <argsstring></argsstring>
        <name>tcpProgress</name>
        <qualifiedname>Networking::Network::tcpProgress</qualifiedname>
        <read>tcpProgress</read>
        <write>setTcpProgress</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="1" column="0" bodyfile="src/c++/network/network.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="group__Properties_1ga7699220558893c267c1ecbc291cf9f58" prot="public" static="no" readable="yes" writable="yes" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type>int</type>
        <definition>int Networking::Network::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <qualifiedname>Networking::Network::connected</qualifiedname>
        <read>connected</read>
        <write>setConnected</write>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="1" column="0" bodyfile="src/c++/network/network.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classNetworking_1_1Network_1a1de2049cdbf7ef1a42e3665c34a509d5" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float Networking::Network::DISCONNECT_DELAY_THRESHOLD</definition>
        <argsstring></argsstring>
        <name>DISCONNECT_DELAY_THRESHOLD</name>
        <qualifiedname>Networking::Network::DISCONNECT_DELAY_THRESHOLD</qualifiedname>
        <initializer>= 10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="43" column="32" bodyfile="src/c++/network/network.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a696294ccc98a038f87d1f0fda3fd8e93" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float Networking::Network::SEMICONNECT_DELAY_THRESHOLD</definition>
        <argsstring></argsstring>
        <name>SEMICONNECT_DELAY_THRESHOLD</name>
        <qualifiedname>Networking::Network::SEMICONNECT_DELAY_THRESHOLD</qualifiedname>
        <initializer>= 3.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="46" column="32" bodyfile="src/c++/network/network.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a5b762b8ec09088fa6d319224d5ef61ff" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float Networking::Network::PING_INTERVAL</definition>
        <argsstring></argsstring>
        <name>PING_INTERVAL</name>
        <qualifiedname>Networking::Network::PING_INTERVAL</qualifiedname>
        <initializer>= 5.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="49" column="32" bodyfile="src/c++/network/network.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classNetworking_1_1Network_1a8f56ac417e202e10a7d3941b0ebdda1d" prot="public" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1TelemetrySocket" kindref="compound">TelemetrySocket</ref> *</type>
        <definition>TelemetrySocket* Networking::Network::telemetrySocket</definition>
        <argsstring></argsstring>
        <name>telemetrySocket</name>
        <qualifiedname>Networking::Network::telemetrySocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="55" column="29" bodyfile="src/c++/network/network.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a771b363c23f5ac346b39c3617b1866a2" prot="public" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1ExecdSocket" kindref="compound">ExecdSocket</ref> *</type>
        <definition>ExecdSocket* Networking::Network::execdSocket</definition>
        <argsstring></argsstring>
        <name>execdSocket</name>
        <qualifiedname>Networking::Network::execdSocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="56" column="25" bodyfile="src/c++/network/network.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a93914fa176fd7fa67024d952cb168c44" prot="public" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1FeedbackSocket" kindref="compound">FeedbackSocket</ref> *</type>
        <definition>FeedbackSocket* Networking::Network::feedbackSocket</definition>
        <argsstring></argsstring>
        <name>feedbackSocket</name>
        <qualifiedname>Networking::Network::feedbackSocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="57" column="28" bodyfile="src/c++/network/network.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a8cde886c1725f9f1a52cf5b4e5f0e0c8" prot="public" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1TCPSocket" kindref="compound">TCPSocket</ref> *</type>
        <definition>TCPSocket* Networking::Network::tcpSocket</definition>
        <argsstring></argsstring>
        <name>tcpSocket</name>
        <qualifiedname>Networking::Network::tcpSocket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="58" column="23" bodyfile="src/c++/network/network.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classNetworking_1_1Network_1a18176decde8d063dda6f6236e2471f7f" prot="private" static="no" mutable="no">
        <type>QTimer *</type>
        <definition>QTimer* Networking::Network::m_network_delay_timer</definition>
        <argsstring></argsstring>
        <name>m_network_delay_timer</name>
        <qualifiedname>Networking::Network::m_network_delay_timer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="147" column="20" bodyfile="src/c++/network/network.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a6add4ec053ebf6fe94d6d9f10a98a658" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Telemetry" kindref="compound">Telemetry</ref> *</type>
        <definition>Telemetry* Networking::Network::m_telemetry</definition>
        <argsstring></argsstring>
        <name>m_telemetry</name>
        <qualifiedname>Networking::Network::m_telemetry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="149" column="23" bodyfile="src/c++/network/network.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1ae3176319aa9cf31fee5fb46062da7778" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1RemoteData" kindref="compound">RemoteData</ref> *</type>
        <definition>RemoteData* Networking::Network::m_remoteData</definition>
        <argsstring></argsstring>
        <name>m_remoteData</name>
        <qualifiedname>Networking::Network::m_remoteData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="150" column="24" bodyfile="src/c++/network/network.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a2681379ef2bf787f3dea16ccb83c834e" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Pinger" kindref="compound">Pinger</ref> *</type>
        <definition>Pinger* Networking::Network::m_de10ping</definition>
        <argsstring></argsstring>
        <name>m_de10ping</name>
        <qualifiedname>Networking::Network::m_de10ping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="152" column="20" bodyfile="src/c++/network/network.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1ae75cc2824a76ce36ea3fef9d2fd9de90" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Pinger" kindref="compound">Pinger</ref> *</type>
        <definition>Pinger* Networking::Network::m_jetsonping</definition>
        <argsstring></argsstring>
        <name>m_jetsonping</name>
        <qualifiedname>Networking::Network::m_jetsonping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="153" column="20" bodyfile="src/c++/network/network.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a5b9000e94e06c545c94db00a8ddab360" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Pinger" kindref="compound">Pinger</ref> *</type>
        <definition>Pinger* Networking::Network::m_navping</definition>
        <argsstring></argsstring>
        <name>m_navping</name>
        <qualifiedname>Networking::Network::m_navping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="154" column="20" bodyfile="src/c++/network/network.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a8526f9d8d8c4a2ed6d6560f88818b0c0" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Pinger" kindref="compound">Pinger</ref> *</type>
        <definition>Pinger* Networking::Network::m_utl1ping</definition>
        <argsstring></argsstring>
        <name>m_utl1ping</name>
        <qualifiedname>Networking::Network::m_utl1ping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="155" column="20" bodyfile="src/c++/network/network.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1aa6f92d8565a45f93480683a91c0537de" prot="private" static="no" mutable="no">
        <type><ref refid="classNetworking_1_1Pinger" kindref="compound">Pinger</ref> *</type>
        <definition>Pinger* Networking::Network::m_utl2ping</definition>
        <argsstring></argsstring>
        <name>m_utl2ping</name>
        <qualifiedname>Networking::Network::m_utl2ping</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="156" column="20" bodyfile="src/c++/network/network.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a227ce30c1ec8ce7ad9645627e184525c" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Networking::Network::m_networkDelay</definition>
        <argsstring></argsstring>
        <name>m_networkDelay</name>
        <qualifiedname>Networking::Network::m_networkDelay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="158" column="19" bodyfile="src/c++/network/network.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1aacacef68f158f3fd67035ec8d182f8ab" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Networking::Network::m_connected</definition>
        <argsstring></argsstring>
        <name>m_connected</name>
        <qualifiedname>Networking::Network::m_connected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="159" column="17" bodyfile="src/c++/network/network.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classNetworking_1_1Network_1a669bf6a39610c99134f7dc8adbfa2bba" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Networking::Network::m_tcpProgress</definition>
        <argsstring></argsstring>
        <name>m_tcpProgress</name>
        <qualifiedname>Networking::Network::m_tcpProgress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="160" column="19" bodyfile="src/c++/network/network.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classNetworking_1_1Network_1a81fa07b4a617fa95389a9d9d401eef7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNetworking_1_1Network" kindref="compound">Network</ref> *</type>
        <definition>Network * Networking::Network::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>Networking::Network::get</qualifiedname>
        <briefdescription>
<para>Returns singleton instance of class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="53" column="28" bodyfile="src/c++/network/network.c++" bodystart="19" bodyend="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNetworking_1_1Network_1a97757f68554cfd4ccdd19aeec2597174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::startTelemetrySocket</definition>
        <argsstring>(const QString &amp;request_address, const QString &amp;recv_address, float frequency)</argsstring>
        <name>startTelemetrySocket</name>
        <qualifiedname>Networking::Network::startTelemetrySocket</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>request_address</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>recv_address</declname>
        </param>
        <param>
          <type>float</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="66" column="30" bodyfile="src/c++/network/network.c++" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1aa59b8f0cac38fbafe81930bfcafe0725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::stopTelemetrySocket</definition>
        <argsstring>()</argsstring>
        <name>stopTelemetrySocket</name>
        <qualifiedname>Networking::Network::stopTelemetrySocket</qualifiedname>
        <briefdescription>
<para>Stops telemetry socket. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be invoked from QML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="70" column="30" bodyfile="src/c++/network/network.c++" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1ad535b5d27ee50189d87de7d143a5aba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::startExecdSocket</definition>
        <argsstring>(const QString &amp;execd_address, const QString &amp;feedback_address)</argsstring>
        <name>startExecdSocket</name>
        <qualifiedname>Networking::Network::startExecdSocket</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>execd_address</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>feedback_address</declname>
        </param>
        <briefdescription>
<para>Starts execd and feedback sockets with given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>execd_address</parametername>
</parameternamelist>
<parameterdescription>
<para>- IPv4 address and port for requests. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feedback_address</parametername>
</parameternamelist>
<parameterdescription>
<para>- IPv4 address and port for feedback (stdout and stderr).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Can be invoked from QML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="76" column="30" bodyfile="src/c++/network/network.c++" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1acafdeaf5ca05b5d8bf6dc37aa60abbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::stopExecdSocket</definition>
        <argsstring>()</argsstring>
        <name>stopExecdSocket</name>
        <qualifiedname>Networking::Network::stopExecdSocket</qualifiedname>
        <briefdescription>
<para>Stops execd and feedback sockets. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be invoked from QML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="80" column="30" bodyfile="src/c++/network/network.c++" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1aa0df6aeb8d171f05658f8198ae9c6312" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::executeCommand</definition>
        <argsstring>(const Networking::Enums::NetworkCommand command) noexcept</argsstring>
        <name>executeCommand</name>
        <qualifiedname>Networking::Network::executeCommand</qualifiedname>
        <param>
          <type>const <ref refid="classNetworking_1_1Enums_1aa669864b51106c17a0f11dfc0a5bcab1" kindref="member">Networking::Enums::NetworkCommand</ref></type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="89" column="30" bodyfile="src/c++/network/network.c++" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a28a6c4a46461d1687e900edf05f1f6fb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::executeString</definition>
        <argsstring>(const QString &amp;string) noexcept</argsstring>
        <name>executeString</name>
        <qualifiedname>Networking::Network::executeString</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="94" column="30" bodyfile="src/c++/network/network.c++" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1ab55ec149f7ce12417d16b2077707af92" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Q_INVOKABLE QString</type>
        <definition>QString Networking::Network::argument</definition>
        <argsstring>(const QString &amp;key, Networking::Enums::ArgumentCategory category=Enums::Form) const noexcept</argsstring>
        <name>argument</name>
        <qualifiedname>Networking::Network::argument</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classNetworking_1_1Enums_1ad5aada946b73c24be636cea5a1679caa" kindref="member">Networking::Enums::ArgumentCategory</ref></type>
          <declname>category</declname>
          <defval><ref refid="classNetworking_1_1Enums_1ad5aada946b73c24be636cea5a1679caaa51567507f5ec32df4442c5183493cb4c" kindref="member">Enums::Form</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="102" column="33" bodyfile="src/c++/network/network.c++" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a6c9e3750c51bad0fb7ab1de4bb42f5c3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::setArgument</definition>
        <argsstring>(const QString &amp;key, const QVariant &amp;value, Networking::Enums::ArgumentCategory category=Enums::Form) noexcept</argsstring>
        <name>setArgument</name>
        <qualifiedname>Networking::Network::setArgument</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classNetworking_1_1Enums_1ad5aada946b73c24be636cea5a1679caa" kindref="member">Networking::Enums::ArgumentCategory</ref></type>
          <declname>category</declname>
          <defval><ref refid="classNetworking_1_1Enums_1ad5aada946b73c24be636cea5a1679caaa51567507f5ec32df4442c5183493cb4c" kindref="member">Enums::Form</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="111" column="30" bodyfile="src/c++/network/network.c++" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1ac65f02d940076ab9d070bc26da727f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::startTCPSocket</definition>
        <argsstring>(const QString &amp;address)</argsstring>
        <name>startTCPSocket</name>
        <qualifiedname>Networking::Network::startTCPSocket</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Starts TCP-IP LFS socket at given address. </para>
        </briefdescription>
        <detaileddescription>
<para>Can be invoked from QML. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="115" column="30" bodyfile="src/c++/network/network.c++" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1ad557fcb1e27d397a13fcc7c66812be1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE void</type>
        <definition>void Networking::Network::stopTCPSocket</definition>
        <argsstring>()</argsstring>
        <name>stopTCPSocket</name>
        <qualifiedname>Networking::Network::stopTCPSocket</qualifiedname>
        <briefdescription>
<para>Stops TCP-IP socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="118" column="30" bodyfile="src/c++/network/network.c++" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a0657943643ea6230f2ead4dc63d4c682" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNetworking_1_1Telemetry" kindref="compound">Telemetry</ref> *</type>
        <definition>Telemetry * Networking::Network::telemetry</definition>
        <argsstring>() const</argsstring>
        <name>telemetry</name>
        <qualifiedname>Networking::Network::telemetry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="120" column="24" bodyfile="src/c++/network/network.c++" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a465ea46870ccbdffe10f863b21b34363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::setTelemetry</definition>
        <argsstring>(Telemetry *)</argsstring>
        <name>setTelemetry</name>
        <qualifiedname>Networking::Network::setTelemetry</qualifiedname>
        <param>
          <type><ref refid="classNetworking_1_1Telemetry" kindref="compound">Telemetry</ref> *</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="120" column="45" bodyfile="src/c++/network/network.c++" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a2ba425ab7b34c8b91042dc940c01fa9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNetworking_1_1RemoteData" kindref="compound">RemoteData</ref> *</type>
        <definition>RemoteData * Networking::Network::remoteData</definition>
        <argsstring>() const</argsstring>
        <name>remoteData</name>
        <qualifiedname>Networking::Network::remoteData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="121" column="25" bodyfile="src/c++/network/network.c++" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a16dc7762439f5ef3cd003c90a15cab81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::setRemoteData</definition>
        <argsstring>(RemoteData *)</argsstring>
        <name>setRemoteData</name>
        <qualifiedname>Networking::Network::setRemoteData</qualifiedname>
        <param>
          <type><ref refid="classNetworking_1_1RemoteData" kindref="compound">RemoteData</ref> *</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="121" column="47" bodyfile="src/c++/network/network.c++" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a85e44463ffb54b6d79ae0903dcfccbca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Networking::Network::networkDelay</definition>
        <argsstring>() const</argsstring>
        <name>networkDelay</name>
        <qualifiedname>Networking::Network::networkDelay</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="122" column="20" bodyfile="src/c++/network/network.c++" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a11f9f2ed99d234f0a2aa1ed5b01f787e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::setNetworkDelay</definition>
        <argsstring>(float)</argsstring>
        <name>setNetworkDelay</name>
        <qualifiedname>Networking::Network::setNetworkDelay</qualifiedname>
        <param>
          <type>float</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="122" column="44" bodyfile="src/c++/network/network.c++" bodystart="147" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a2b4c830916e9407ba5e436eb6d822818" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Networking::Network::connected</definition>
        <argsstring>() const</argsstring>
        <name>connected</name>
        <qualifiedname>Networking::Network::connected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="123" column="18" bodyfile="src/c++/network/network.c++" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a9ebfd04e4de8664e474b427ab4950ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::setConnected</definition>
        <argsstring>(int)</argsstring>
        <name>setConnected</name>
        <qualifiedname>Networking::Network::setConnected</qualifiedname>
        <param>
          <type>int</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="123" column="39" bodyfile="src/c++/network/network.c++" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a917fddaf19b187d0475c9a9ee35fe507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Networking::Network::tcpProgress</definition>
        <argsstring>() const</argsstring>
        <name>tcpProgress</name>
        <qualifiedname>Networking::Network::tcpProgress</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="124" column="20" bodyfile="src/c++/network/network.c++" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a210eaf3c71e726933650481f3d7f4e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::setTcpProgress</definition>
        <argsstring>(float)</argsstring>
        <name>setTcpProgress</name>
        <qualifiedname>Networking::Network::setTcpProgress</qualifiedname>
        <param>
          <type>float</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="124" column="43" bodyfile="src/c++/network/network.c++" bodystart="168" bodyend="173"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="signal">
      <memberdef kind="signal" id="classNetworking_1_1Network_1a73da06e5781c901cd0be46dcc906b12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::telemetryChanged</definition>
        <argsstring>()</argsstring>
        <name>telemetryChanged</name>
        <qualifiedname>Networking::Network::telemetryChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="127" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a469a121d954db46b714ff3dd39f3edee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::remoteDataChanged</definition>
        <argsstring>()</argsstring>
        <name>remoteDataChanged</name>
        <qualifiedname>Networking::Network::remoteDataChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="128" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a03807e14b04b4eec201e39c5658e53d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::networkDelayChanged</definition>
        <argsstring>()</argsstring>
        <name>networkDelayChanged</name>
        <qualifiedname>Networking::Network::networkDelayChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="129" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1aa35d0e80fd3fc083d998ab5f5b14fdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::connectedChanged</definition>
        <argsstring>()</argsstring>
        <name>connectedChanged</name>
        <qualifiedname>Networking::Network::connectedChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="130" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1ac1ce4ee69f7fce12c5e3ed0b8fc8cf78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::tcpProgressChanged</definition>
        <argsstring>()</argsstring>
        <name>tcpProgressChanged</name>
        <qualifiedname>Networking::Network::tcpProgressChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="131" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a6b4a3c4e475a5feb2c946eaf522ec680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::telemetrySocketMetrics</definition>
        <argsstring>(const QString &amp;data, int size_bytes, bool out)</argsstring>
        <name>telemetrySocketMetrics</name>
        <qualifiedname>Networking::Network::telemetrySocketMetrics</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@group Metrics</para>
<para><ref refid="classProvides" kindref="compound">Provides</ref> stringified data, packet size and direction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="135" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1ab979ff7ac0590804b2a185dfdc09c0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::execdSocketMetrics</definition>
        <argsstring>(const QString &amp;data, int size_bytes, bool out)</argsstring>
        <name>execdSocketMetrics</name>
        <qualifiedname>Networking::Network::execdSocketMetrics</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="136" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a9272ac9b7f092165faf1c6484837c959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::feedbackSocketMetrics</definition>
        <argsstring>(const QString &amp;data, int size_bytes, bool out)</argsstring>
        <name>feedbackSocketMetrics</name>
        <qualifiedname>Networking::Network::feedbackSocketMetrics</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="137" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a71c6d066eab6207734642181203b58b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::lfsSocketMetrics</definition>
        <argsstring>(const QString &amp;msg, int size_bytes, bool out)</argsstring>
        <name>lfsSocketMetrics</name>
        <qualifiedname>Networking::Network::lfsSocketMetrics</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="138" column="22"/>
      </memberdef>
      <memberdef kind="signal" id="classNetworking_1_1Network_1a32f61ba9334b08c72d4f7f4fa63d1d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Networking::Network::stripSocketMetrics</definition>
        <argsstring>(const QString msg, int size_bytes, bool out)</argsstring>
        <name>stripSocketMetrics</name>
        <qualifiedname>Networking::Network::stripSocketMetrics</qualifiedname>
        <param>
          <type>const QString</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size_bytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="139" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classNetworking_1_1Network_1a17ed950670d526049e59033987d75e09" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Networking::Network::Network</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>Network</name>
        <qualifiedname>Networking::Network::Network</qualifiedname>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="142" column="22" bodyfile="src/c++/network/network.c++" bodystart="21" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a8b42432c13bedf0210b22a604cf821cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Networking::Network::Network</definition>
        <argsstring>(const Network &amp;)</argsstring>
        <name>Network</name>
        <qualifiedname>Networking::Network::Network</qualifiedname>
        <param>
          <type>const <ref refid="classNetworking_1_1Network" kindref="compound">Network</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="143" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classNetworking_1_1Network_1a8a2b52ae49821b72ca3fcf3a58e3e699" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classNetworking_1_1Network" kindref="compound">Network</ref> &amp;</type>
        <definition>Network &amp; Networking::Network::operator=</definition>
        <argsstring>(const Network &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>Networking::Network::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classNetworking_1_1Network" kindref="compound">Network</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/c++/network/network.h" line="144" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Networking::Network</label>
        <link refid="classNetworking_1_1Network"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Networking::AbstractUDPSocket</label>
        <link refid="classNetworking_1_1AbstractUDPSocket"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Networking::ExecdSocket</label>
        <link refid="classNetworking_1_1ExecdSocket"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Networking::FeedbackSocket</label>
        <link refid="classNetworking_1_1FeedbackSocket"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Networking::Network</label>
        <link refid="classNetworking_1_1Network"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>telemetrySocket</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>execdSocket</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>feedbackSocket</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>tcpSocket</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>Networking::TCPSocket</label>
        <link refid="classNetworking_1_1TCPSocket"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Networking::TelemetrySocket</label>
        <link refid="classNetworking_1_1TelemetrySocket"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
      <node id="5">
        <label>QUdpSocket</label>
      </node>
    </collaborationgraph>
    <location file="src/c++/network/network.h" line="22" column="5" bodyfile="src/c++/network/network.h" bodystart="23" bodyend="161"/>
    <listofallmembers>
      <member refid="classNetworking_1_1Network_1ab55ec149f7ce12417d16b2077707af92" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>argument</name></member>
      <member refid="group__Properties_1ga7699220558893c267c1ecbc291cf9f58" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>connected</name></member>
      <member refid="classNetworking_1_1Network_1a2b4c830916e9407ba5e436eb6d822818" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>connected</name></member>
      <member refid="classNetworking_1_1Network_1aa35d0e80fd3fc083d998ab5f5b14fdc6" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>connectedChanged</name></member>
      <member refid="classNetworking_1_1Network_1a1de2049cdbf7ef1a42e3665c34a509d5" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>DISCONNECT_DELAY_THRESHOLD</name></member>
      <member refid="classNetworking_1_1Network_1a771b363c23f5ac346b39c3617b1866a2" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>execdSocket</name></member>
      <member refid="classNetworking_1_1Network_1ab979ff7ac0590804b2a185dfdc09c0c6" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>execdSocketMetrics</name></member>
      <member refid="classNetworking_1_1Network_1aa0df6aeb8d171f05658f8198ae9c6312" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>executeCommand</name></member>
      <member refid="classNetworking_1_1Network_1a28a6c4a46461d1687e900edf05f1f6fb" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>executeString</name></member>
      <member refid="classNetworking_1_1Network_1a93914fa176fd7fa67024d952cb168c44" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>feedbackSocket</name></member>
      <member refid="classNetworking_1_1Network_1a9272ac9b7f092165faf1c6484837c959" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>feedbackSocketMetrics</name></member>
      <member refid="classNetworking_1_1Network_1a81fa07b4a617fa95389a9d9d401eef7e" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>get</name></member>
      <member refid="classNetworking_1_1Network_1a71c6d066eab6207734642181203b58b9" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>lfsSocketMetrics</name></member>
      <member refid="classNetworking_1_1Network_1aacacef68f158f3fd67035ec8d182f8ab" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_connected</name></member>
      <member refid="classNetworking_1_1Network_1a2681379ef2bf787f3dea16ccb83c834e" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_de10ping</name></member>
      <member refid="classNetworking_1_1Network_1ae75cc2824a76ce36ea3fef9d2fd9de90" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_jetsonping</name></member>
      <member refid="classNetworking_1_1Network_1a5b9000e94e06c545c94db00a8ddab360" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_navping</name></member>
      <member refid="classNetworking_1_1Network_1a18176decde8d063dda6f6236e2471f7f" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_network_delay_timer</name></member>
      <member refid="classNetworking_1_1Network_1a227ce30c1ec8ce7ad9645627e184525c" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_networkDelay</name></member>
      <member refid="classNetworking_1_1Network_1ae3176319aa9cf31fee5fb46062da7778" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_remoteData</name></member>
      <member refid="classNetworking_1_1Network_1a669bf6a39610c99134f7dc8adbfa2bba" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_tcpProgress</name></member>
      <member refid="classNetworking_1_1Network_1a6add4ec053ebf6fe94d6d9f10a98a658" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_telemetry</name></member>
      <member refid="classNetworking_1_1Network_1a8526f9d8d8c4a2ed6d6560f88818b0c0" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_utl1ping</name></member>
      <member refid="classNetworking_1_1Network_1aa6f92d8565a45f93480683a91c0537de" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>m_utl2ping</name></member>
      <member refid="classNetworking_1_1Network_1a17ed950670d526049e59033987d75e09" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>Network</name></member>
      <member refid="classNetworking_1_1Network_1a8b42432c13bedf0210b22a604cf821cc" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>Network</name></member>
      <member refid="group__Properties_1ga8faa0f475ccedfbaf3b5bcc5261fed00" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>networkDelay</name></member>
      <member refid="classNetworking_1_1Network_1a85e44463ffb54b6d79ae0903dcfccbca" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>networkDelay</name></member>
      <member refid="classNetworking_1_1Network_1a03807e14b04b4eec201e39c5658e53d0" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>networkDelayChanged</name></member>
      <member refid="classNetworking_1_1Network_1a8a2b52ae49821b72ca3fcf3a58e3e699" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>operator=</name></member>
      <member refid="classNetworking_1_1Network_1a5b762b8ec09088fa6d319224d5ef61ff" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>PING_INTERVAL</name></member>
      <member refid="group__Properties_1gac96b77e2304c4f308dfd5bd59d25e383" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>remoteData</name></member>
      <member refid="classNetworking_1_1Network_1a2ba425ab7b34c8b91042dc940c01fa9b" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>remoteData</name></member>
      <member refid="classNetworking_1_1Network_1a469a121d954db46b714ff3dd39f3edee" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>remoteDataChanged</name></member>
      <member refid="classNetworking_1_1Network_1a696294ccc98a038f87d1f0fda3fd8e93" prot="private" virt="non-virtual"><scope>Networking::Network</scope><name>SEMICONNECT_DELAY_THRESHOLD</name></member>
      <member refid="classNetworking_1_1Network_1a6c9e3750c51bad0fb7ab1de4bb42f5c3" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setArgument</name></member>
      <member refid="classNetworking_1_1Network_1a9ebfd04e4de8664e474b427ab4950ffe" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setConnected</name></member>
      <member refid="classNetworking_1_1Network_1a11f9f2ed99d234f0a2aa1ed5b01f787e" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setNetworkDelay</name></member>
      <member refid="classNetworking_1_1Network_1a16dc7762439f5ef3cd003c90a15cab81" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setRemoteData</name></member>
      <member refid="classNetworking_1_1Network_1a210eaf3c71e726933650481f3d7f4e35" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setTcpProgress</name></member>
      <member refid="classNetworking_1_1Network_1a465ea46870ccbdffe10f863b21b34363" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>setTelemetry</name></member>
      <member refid="classNetworking_1_1Network_1ad535b5d27ee50189d87de7d143a5aba7" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>startExecdSocket</name></member>
      <member refid="classNetworking_1_1Network_1ac65f02d940076ab9d070bc26da727f95" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>startTCPSocket</name></member>
      <member refid="classNetworking_1_1Network_1a97757f68554cfd4ccdd19aeec2597174" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>startTelemetrySocket</name></member>
      <member refid="classNetworking_1_1Network_1acafdeaf5ca05b5d8bf6dc37aa60abbcc" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>stopExecdSocket</name></member>
      <member refid="classNetworking_1_1Network_1ad557fcb1e27d397a13fcc7c66812be1f" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>stopTCPSocket</name></member>
      <member refid="classNetworking_1_1Network_1aa59b8f0cac38fbafe81930bfcafe0725" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>stopTelemetrySocket</name></member>
      <member refid="classNetworking_1_1Network_1a32f61ba9334b08c72d4f7f4fa63d1d38" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>stripSocketMetrics</name></member>
      <member refid="group__Properties_1ga9ec5c75178b85fb66b7a424c3bf398df" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>tcpProgress</name></member>
      <member refid="classNetworking_1_1Network_1a917fddaf19b187d0475c9a9ee35fe507" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>tcpProgress</name></member>
      <member refid="classNetworking_1_1Network_1ac1ce4ee69f7fce12c5e3ed0b8fc8cf78" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>tcpProgressChanged</name></member>
      <member refid="classNetworking_1_1Network_1a8cde886c1725f9f1a52cf5b4e5f0e0c8" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>tcpSocket</name></member>
      <member refid="group__Properties_1ga1b8969b46c27f16da4d4f37754bcd7ad" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>telemetry</name></member>
      <member refid="classNetworking_1_1Network_1a0657943643ea6230f2ead4dc63d4c682" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>telemetry</name></member>
      <member refid="classNetworking_1_1Network_1a73da06e5781c901cd0be46dcc906b12e" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>telemetryChanged</name></member>
      <member refid="classNetworking_1_1Network_1a8f56ac417e202e10a7d3941b0ebdda1d" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>telemetrySocket</name></member>
      <member refid="classNetworking_1_1Network_1a6b4a3c4e475a5feb2c946eaf522ec680" prot="public" virt="non-virtual"><scope>Networking::Network</scope><name>telemetrySocketMetrics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
